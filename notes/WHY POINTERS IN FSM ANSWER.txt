std::weak_ptr<IState> current;

weak_ptr doesn't own the data


the reason its a pointer is so that if you have saved several states you can point to any of them.


example:

Player_FSM {
	Idle idle;		// Idle : public IState
	Attack attack;	// Attack : public IState
	Damage damage;	// Damage : public IState

	PlayerState *current_state; // weak pointer

	void Update(){
		bool ret = current_state->Update();

		if (!ret){
			current_state->Exit();
			current_state = current_state->NextState();
			current_state->Init();
		}
	}
}



Pet_FSM {
	PetData *pet_data;
	PetState current_state;

	bool Update(){
		bool ret = current_state.Update();

		if (!ret){
			current_state.Exit();
			SwitchState(current_state.NextState());
		}
	}

	void SwitchState(PetState state){
		current_state = state;
		state.Init(pet_data);
	}
}




enum SwitchType {switch, push, pop};

Pet_PDA {
	std::vector history;

	PetData *pet_data;
	PetState current_state;

	bool Update(){
		bool ret = current_state.Update();

		if (!ret){
			current_state.Exit();

			switch (current_state.GetSwitchType()){
				case SwitchType::switch:
					SwitchState(current_state.NextState());
					break;
				case SwitchType::push:
					PushState(current_state.NextState());
					break;
				case SwitchType::pop:
					PopState();
					break;
				default:
					break;
			}
		}
	}

	void SwitchState(PetState state){
		current_state = state;
		state.Init(pet_data);
	}
	void PushState(PetState state){
		history.push_back(current_state);
		SwitchState(state);
	}
	void PopState(PetState state){
		current_state = history[history.size() - 1];
		history.pop_back();
	}
}